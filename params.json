{
  "name": "Redux-actions-assertions",
  "tagline": "Assertions for redux actions testing",
  "body": "# redux-actions-assertions \r\nAssertions for redux actions testing.\r\n\r\nThis library adds assertions for [redux actions](http://redux.js.org/docs/advanced/AsyncActions.html) testing.  \r\nIt use [redux-mock-store](https://github.com/arnaudbenard/redux-mock-store) to mock redux store.\r\n\r\n[![build status](https://img.shields.io/travis/dmitry-zaets/redux-actions-assertions/master.svg?style=flat-square)](https://travis-ci.org/dmitry-zaets/redux-actions-assertions)\r\n[![npm version](https://img.shields.io/npm/v/redux-actions-assertions.svg?style=flat-square)](https://www.npmjs.com/package/redux-actions-assertions)\r\n\r\n## What it does:\r\n- [Simplifies initial setup](#simplifies-initial-setup);\r\n- [Reduces repetitive code of test methods](#reduces-repetitive-code-of-test-methods);\r\n- [Allows to avoid re-testing nested action creators](#allows-to-avoid-re-testing-nested-action-creators);\r\n\r\n## Supported Assertion Frameworks/Libraries:\r\n- [chai](#chai)\r\n- [expect](#expect)\r\n- [expect.js](#expectjs)\r\n- [should](#should)\r\n\r\nIf you have not found assertion framework/library that you are using - you can use [pure javascript assertion](#javascript) or create an issue.\r\n\r\n### Simplifies initial setup\r\nIt provides singe-time global configuration for middlewares and initial store state.\r\n\r\nWithout:\r\n```javascript\r\nconst middlewares = [thunk];\r\nconst mockStore = configureStore(middlewares);\r\nconst store = mockStore({ /*initial store object*});\r\n```\r\nWith:\r\n```javascript\r\nregisterMiddlewares([ thunk ]);\r\n// to set custom initial state \r\nregisterInitialStoreState(/*object of function*/);\r\n// to generate initial state of your application\r\nregisterInitialStoreState(buildInitialStoreState(/*your root reducer*/));\r\n```\r\n\r\n### Reduces repetitive code of test methods\r\nIt reduces boilerplate of test methods and makes testing fluent.\r\n\r\nWithout:\r\n```javascript\r\nconst store = mockStore(/* initial state */);\r\nconst expectedActions = [\r\n  { type: types.FETCH_TODOS_REQUEST },\r\n  /* All expected triggered action objects */\r\n];\r\nstore.dispatch(fetchData()).then(() => {\r\n  const actions = store.getActions();\r\n  expect(actions).toEqual(expectedActions);\r\n}).then(done).catch(done);\r\n```\r\n\r\nWith:\r\n```javascript\r\nconst expectedActions = [\r\n  /*All expected triggered action objects or action creator functions*/\r\n];\r\nexpect(fetchData()).toDispatchActions(expectedActions, done);\r\n```\r\n\r\nWith using customised store state:\r\n```javascript\r\nexpect(fetchData()).withState({/*custom state*/}).toDispatchActions(expectedActions, done);\r\n```\r\n\r\n### Allows to avoid re-testing nested action creators\r\nIt allows to test only actions that needs to be tested.\r\n\r\n**Example:**  \r\nWe have two actions (A, B). Each one makes async http requests.  \r\nAction A makes request and if result is successful it triggers Action B.  \r\nAction B is also used as independent action.  \r\nAction B can be tested separately.  \r\nWe don't need to test it again in Action A.  \r\n\r\nActions:\r\n```javascript\r\nfunction actionA() {\r\n  return dispatch => {\r\n    dispatch(actionAStart());\r\n    return api.getA().then(response => {\r\n        dispatch(actionAFinish(response));\r\n        dispatch(actionB());\r\n      }).catch(err => {\r\n        dispatch(actionAFailure(err));\r\n      });\r\n    };\r\n}\r\n\r\nfunction actionB() {\r\n  return dispatch => {\r\n    dispatch(actionBStart());\r\n    return api.getB().then(response => {\r\n        dispatch(actionBFinish(response));\r\n      }).catch(err => {\r\n        dispatch(actionBFailure(err));\r\n      });\r\n    };\r\n}\r\n```\r\n\r\nWithout:\r\n```javascript\r\nconst expectedActions = [\r\n  { type: action_a_start },\r\n  { type: action_a_success },   \r\n  { type: action_b_start }, // retesting of action B\r\n  { type: action_b_success } // retesting of action B];\r\nconst store = mockStore({ todos: [] });\r\nstore.dispatch(actionA()).then(() => {\r\n  expect(store.getActions()).toEqual(expectedActions);\r\n}).then(done).catch(done);\r\n```\r\n\r\nWith:\r\n```javascript\r\nexpect(actionA()).withState({ todos: [] }).toDispatch([\r\n  { type: action_a_start },\r\n  { type: action_a_success },\r\n  actionB() // just executing tested action\r\n], done);\r\n```\r\n\r\n## Installation\r\n\r\nUsing [npm](https://www.npmjs.org/):\r\n\r\n    $ npm install --save redux-actions-assertions\r\n\r\n### Redux middlewares registration\r\n\r\n```js\r\n// using ES6 modules\r\nimport { registerMiddlewares } from 'redux-actions-assertions';\r\n\r\n// using CommonJS modules\r\nvar registerMiddlewares = require('redux-actions-assertions').registerMiddlewares;\r\n\r\n// registration\r\nregisterMiddlewares([\r\n  /* Here you need to list your middlewares */\r\n]);\r\n```\r\n\r\n### Default initial store state registration\r\n\r\n**By using state object or function:**\r\n```js\r\n// using ES6 modules\r\nimport { registerInitialStoreState } from 'redux-actions-assertions';\r\n\r\n// using CommonJS modules\r\nvar registerInitialStoreState = require('redux-actions-assertions').registerInitialStoreState;\r\n\r\n// registration\r\nregisterInitialStoreState(/* default initial state object or function */);\r\n```\r\n**By using your root reducer:**\r\n```js\r\n// using ES6 modules\r\nimport { buildInitialStoreState, registerInitialStoreState } from 'redux-actions-assertions';\r\n\r\n// using CommonJS modules\r\nvar reduxActionsAssertions = require('redux-actions-assertions');\r\nvar registerInitialStoreState = reduxActionsAssertions.registerInitialStoreState;\r\n\r\n// registration\r\nregisterInitialStoreState(buildInitialStoreState(/* root reducer function */));\r\n```\r\n\r\n## javascript\r\n\r\n### Registration\r\n\r\nFor plain javasript assertions you dont need to register anything. Just import assertions in your tests:\r\n\r\n```js\r\n// using ES6 modules\r\nimport assertions from 'redux-actions-assertions/assertions';\r\n\r\n// using CommonJS modules\r\nvar assertions = require('redux-actions-assertions/assertions');\r\n\r\n// in test\r\nassertions.toDispatchActions(/**/)\r\nassertions.toDispatchActionsWithState(/**/);\r\n```\r\n\r\n### Usage\r\n\r\n#### toDispatchActions\r\n> `toDispatchActions(action, expectedActions, callback)`\r\n\r\nAsserts that when given `action` is dispatched it will dispatch `expectedActions`. `action` can be plain object (action) or function (action creator). `expectedActions` can be can be plain object (action) or function (action creator) or array of objects/functions.\r\n\r\n```js\r\ntoDispatchActions(testActionCreator(), [{ type: 'MY_ACTION_START' }], callback);\r\n```\r\n\r\n#### toDispatchActionsWithState\r\n\r\n> `toDispatchActionsWithState(initialState, action, expectedActions, callback)`\r\n\r\nSame as `toDispatchActions` + asserts that store initialised with `state` before `action` is dispatched.\r\n\r\n```js\r\ntoDispatchActions({property: 'value'}, testActionCreator(), [{ type: 'MY_ACTION_START' }], callback);\r\n```\r\n\r\n## [chai](https://github.com/chaijs/chai)\r\n\r\n### Registration\r\n\r\n```js\r\n// using ES6 modules\r\nimport { registerAssertions } from 'redux-actions-assertions/chai';\r\n\r\n// using CommonJS modules\r\nvar registerAssertions = require('redux-actions-assertions/chai').registerAssertions;\r\n\r\n// registration\r\nregisterAssertions();\r\n```\r\n\r\n#### .to.dispatch.actions or assert.isDispatching\r\n\r\n> `expect(action).to.dispatch.actions(expectedActions, callback)`\r\n\r\n> `action.should.dispatch.actions(expectedActions, callback)`\r\n\r\n> `assert.isDispatching(action, expectedActions, callback)`\r\n\r\nAsserts that when given `action` is dispatched it will dispatch `expectedActions`. `action` can be plain object (action) or function (action creator). `expectedActions` can be can be plain object (action) or function (action creator) or array of objects/functions.\r\n\r\n```js\r\nexpect(myActionCreator())\r\n  .to.dispatch.actions({ type: 'MY_ACTION_START' }, callback);\r\n\r\nmyActionCreator()\r\n  .should.dispatch.actions({ type: 'MY_ACTION_START' }, callback);\r\n\r\nassert.isDispatching(\r\n  myActionCreator(),\r\n  { type: 'MY_ACTION_START' },\r\n  callback\r\n);\r\n```\r\n\r\n#### .with.state or assert.isDispatchingWithState\r\n\r\n> `expect(action).with.state(state).to.dispatch.actions(expectedActions, callback)`\r\n\r\n> `action.should.with.state(state).dispatch.actions(expectedActions, callback)`\r\n\r\n> `assert.isDispatchingWithState(action, expectedActions, state, callback)`\r\n\r\nAsserts that store initialised with `state` before `action` is dispatched.\r\n```js\r\nexpect(myActionCreator())\r\n  .with.state({ property: 'value' })\r\n  .to.dispatch.actions([{ type: 'MY_ACTION_START' }, finishActionCreator()], callback);\r\n\r\nmyActionCreator()\r\n  .should.with.({ property: 'value' })\r\n  .dispatch.actions([{ type: 'MY_ACTION_START' }, finishActionCreator()], callback);\r\n\r\nassert.isDispatchingWithState(\r\n  myActionCreator(),\r\n  [{ type: 'MY_ACTION_START' }, finishActionCreator()],\r\n  { property: 'value' }\r\n  callback\r\n);\r\n```\r\n\r\n## [expect](https://github.com/mjackson/expect)\r\n\r\n### Registration\r\n\r\n```js\r\n// using ES6 modules\r\nimport { registerAssertions } from 'redux-actions-assertions/expect';\r\n\r\n// using CommonJS modules\r\nvar registerAssertions = require('redux-actions-assertions/expect').registerAssertions;\r\n\r\n// registration\r\nregisterAssertions();\r\n```\r\n### Usage\r\n\r\n#### .toDispatchActions\r\n\r\n> `expect(action).toDispatchActions(expectedActions, callback)`\r\n\r\nAsserts that when given `action` is dispatched it will dispatch `expectedActions`. `action` can be plain object (action) or function (action creator). `expectedActions` can be can be plain object (action) or function (action creator) or array of objects/functions.\r\n\r\n```js\r\nexpect(myActionCreator())\r\n  .toDispatchActions({ type: 'MY_ACTION_START' }, callback);\r\n```\r\n\r\n#### .withState\r\n\r\n> `expect(action).withState(state).toDispatchActions(expectedActions, callback)`\r\n\r\nAsserts that store initialised with `state` before `action` is dispatched.\r\n\r\n```js\r\nexpect(myActionCreator())\r\n  .withState({property: 'value'})\r\n  .toDispatchActions([{ type: 'MY_ACTION_START' }, finishActionCreator()], callback);\r\n```\r\n\r\n## [expect.js](https://github.com/Automattic/expect.js)\r\n\r\n### Registration\r\n\r\n```js\r\n// using ES6 modules\r\nimport { registerAssertions } from 'redux-actions-assertions/expectjs';\r\n\r\n// using CommonJS modules\r\nvar registerAssertions = require('redux-actions-assertions/expectjs').registerAssertions;\r\n\r\n// registration\r\nregisterAssertions();\r\n```\r\n\r\n### Usage\r\n\r\n#### .dispatchActions\r\n\r\n> `expect(action).to.dispatchActions(expectedActions, callback)`\r\n\r\nAsserts that when given `action` is dispatched it will dispatch `expectedActions`. `action` can be plain object (action) or function (action creator). `expectedActions` can be can be plain object (action) or function (action creator) or array of objects/functions.\r\n\r\n```js\r\nexpect(myActionCreator())\r\n  .to.dispatchActions({ type: 'MY_ACTION_START' }, callback);\r\n```\r\n\r\n#### .withState\r\n\r\n> `expect(action).withState(state).to.dispatchActions(expectedActions, callback)`\r\n\r\nAsserts that store initialised with `state` before `action` is dispatched.\r\n\r\n```js\r\nexpect(myActionCreator())\r\n  .withState({ property: 'value' })\r\n  .to.dispatchActions([{ type: 'MY_ACTION_START' }, finishActionCreator()], callback);\r\n```\r\n\r\n## [should](https://github.com/shouldjs/should.js)\r\n\r\n### Registration\r\n\r\n```js\r\n// using ES6 modules\r\nimport { registerAssertions } from 'redux-actions-assertions/should';\r\n\r\n// using CommonJS modules\r\nvar registerAssertions = require('redux-actions-assertions/should').registerAssertions;\r\n\r\n// registration\r\nregisterAssertions();\r\n```\r\n\r\n### Usage\r\n\r\n#### .dispatchActions\r\n\r\n> `should(action).dispatchActions(expectedActions, callback)`\r\n> `action.should.dispatchActions(expectedActions, callback)`\r\n\r\nAsserts that when given `action` is dispatched it will dispatch `expectedActions`. `action` can be plain object (action) or function (action creator). `expectedActions` can be can be plain object (action) or function (action creator) or array of objects/functions.\r\n\r\n```js\r\nshould(myActionCreator())\r\n  .dispatchActions({ type: 'MY_ACTION_START' }, callback);\r\n\r\nmyActionCreator().should\r\n  .dispatchActions({ type: 'MY_ACTION_START' }, callback);\r\n```\r\n\r\n#### .withState or with.state\r\n\r\n> `should(action).withState(state).dispatchActions(expectedActions, callback)`\r\n> `should(action).with.state(state).dispatchActions(expectedActions, callback)`\r\n\r\n> `action.should.withState(state).dispatchActions(expectedActions, callback)`\r\n> `action.should.with.state(state).dispatchActions(expectedActions, callback)`\r\n\r\nAsserts that store initialised with `state` before `action` is dispatched.\r\n\r\n```js\r\nshould(myActionCreator())\r\n  .withState({ property: 'value' })\r\n  .dispatchActions({ type: 'MY_ACTION_START' }, callback);\r\n\r\nshould(myActionCreator())\r\n  .with.state({ property: 'value' })\r\n  .dispatchActions({ type: 'MY_ACTION_START' }, callback);\r\n\r\nmyActionCreator().should\r\n  .withState({ property: 'value' })\r\n  .dispatchActions({ type: 'MY_ACTION_START' }, callback);\r\n\r\nmyActionCreator().should\r\n  .with.state({ property: 'value' })\r\n  .dispatchActions({ type: 'MY_ACTION_START' }, callback);\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}